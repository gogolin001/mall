// 所有模块/项目的通用配置
allprojects {

}


// 子模块/项目的统一配置
subprojects {

    ext {//依赖版本
        springBootVersion = "2.7.4"
        mysqlConnectorVersion = "8.0.30"
        mybatisPlusStarterVersion = "3.5.2"
        fastjsonVersion = "2.0.14"
        junitVersion = "5.9.0"
        javaxServletVersion = "4.0.1"
        commonsLang3Version = "3.12.0"
        jetcacheVersion = "2.7.0"
        shardingsphereVersion = "5.2.0"
        lombokVersion = "1.18.24"
        hutoolVersion = "5.8.8"
        easyExcelVersion = "3.1.1"
        wxjavaVersion = "4.4.0"
        alipayVersion = "4.34.0.ALL"
        alipayEasyVersion = "2.2.2"
        springfoxVersion = "3.0.0"
        knife4jVersion = "3.0.3"
        logstashLogbackVersion = "7.2"
        jjwtVersion = "0.9.1"
        lettuceVersion = "6.2.1.RELEASE"
    }

    repositories {
        maven{ url 'https://maven.aliyun.com/nexus/content/groups/public/'}
    }

    /*dependencies {
        implementation(
                "javax.servlet:javax.servlet-api:$javaxServletVersion",
                // json
                "com.alibaba:fastjson:$fastjsonVersion",
                // excel
                "com.alibaba:easyexcel:$easyExcelVersion",
                // 常用库
                "cn.hutool:hutool-all:$hutoolVersion",
                "net.logstash.logback:logstash-logback-encoder:$logstashLogbackVersion",
                //'ch.qos.logback:logback-classic:1.4.3',
                //'org.slf4j:slf4j-api:2.0.3',
                // web
                "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
                "org.springframework.boot:spring-boot-starter-aop:$springBootVersion",
                // 缓存
                "io.lettuce:lettuce-core:$lettuceVersion",
                "com.alicp.jetcache:jetcache-starter-redis-lettuce:$jetcacheVersion",
                "org.springframework.boot:spring-boot-starter-data-redis:$springBootVersion",
                // 数据库
                "com.baomidou:mybatis-plus-boot-starter:$mybatisPlusStarterVersion",
                "mysql:mysql-connector-java:$mysqlConnectorVersion",
                "org.apache.shardingsphere:shardingsphere-jdbc-core-spring-boot-starter:$shardingsphereVersion",
                // 微信
                "com.github.binarywang:weixin-java-miniapp:$wxjavaVersion", //微信小程序
                "com.github.binarywang:weixin-java-pay:$wxjavaVersion", //微信支付
                "com.github.binarywang:weixin-java-open:$wxjavaVersion", //微信开放平台
                "com.github.binarywang:weixin-java-mp:$wxjavaVersion", //公众号（包括订阅号和服务号）
                "com.github.binarywang:weixin-java-cp:$wxjavaVersion", //企业号/企业微信
                // 支付宝
                "com.alipay.sdk:alipay-sdk-java:$alipayVersion",
                "com.alipay.sdk:alipay-easysdk:$alipayEasyVersion",
                // 在线文档
                "io.springfox:springfox-boot-starter:$springfoxVersion",
                'io.swagger:swagger-models:1.6.7',
                'io.swagger:swagger-annotations:1.6.7',
                //"com.github.xiaoymin:knife4j-spring-boot-starter:$knife4jVersion",
                // 权限
                "io.jsonwebtoken:jjwt:$jjwtVersion",
                "org.springframework.boot:spring-boot-starter-security:$springBootVersion"


        )
        compileOnly("org.projectlombok:lombok:$lombokVersion")
        annotationProcessor("org.projectlombok:lombok:$lombokVersion")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:$springBootVersion")
        // 单元测试
        testCompileOnly("org.projectlombok:lombok:$lombokVersion")
	    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
        testImplementation("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    }*/

    configurations {
        //移除spring boot 默认logger依赖
        all*.exclude module: 'spring-boot-starter-logging'
    }


    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
}
